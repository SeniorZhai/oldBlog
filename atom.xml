<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeniorZhai&#39;s blog</title>
  <subtitle>苟利国家生死以，起因福祸趋避之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seniorzhai.github.io/"/>
  <updated>2016-08-26T05:43:11.000Z</updated>
  <id>http://seniorzhai.github.io/</id>
  
  <author>
    <name>Dear宅学长</name>
    <email>developer.zhaitao@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>API可用性检测</title>
    <link href="http://seniorzhai.github.io/2016/08/26/API%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    <id>http://seniorzhai.github.io/2016/08/26/API可用性检测/</id>
    <published>2016-08-26T05:37:00.000Z</published>
    <updated>2016-08-26T05:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift有检查API可用性的内置支持，确保我们在使用时不会不小心使用当前不可用的API<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> #available(platform name version, ..., *) &#123;</div><div class="line">  statements</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用性条件获取了一系列平台的名字和版本，平台名可以是<code>iOS</code>、<code>OSX</code>、<code>watchOS</code>，版本号可以是主版本号或者小版本，比如<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#available(iOS <span class="number">9</span>, <span class="type">OSX10</span>.<span class="number">10</span>, *)</div></pre></td></tr></table></figure></p>
<p>最后一个参数<code>*</code>是必须写的，用于处理未来潜在的平台</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift有检查API可用性的内置支持，确保我们在使用时不会不小心使用当前不可用的API&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://seniorzhai.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>guard和defer</title>
    <link href="http://seniorzhai.github.io/2016/08/25/guard%E5%92%8Cdefer/"/>
    <id>http://seniorzhai.github.io/2016/08/25/guard和defer/</id>
    <published>2016-08-25T11:01:12.000Z</published>
    <updated>2016-09-01T03:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在看swift的代码的时候，遇见两个新的关键字，语法特性很特别<br><a id="more"></a></p>
<p>#guard<br>guard有点像断言<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &lt; <span class="number">13</span> &#123;</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 与上面代码等价</span></div><div class="line"><span class="keyword">guard</span> age &gt;= <span class="number">13</span> <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>guard起来保证的作用，age大于13否则return<br>在<code>if-let</code>解包的时候使用，会使得代码看清来更简洁<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> name = user.name <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 逻辑 */</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = user.name &#123;</div><div class="line">  <span class="comment">/* 处理逻辑 */</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#defer<br>defer是使代码延后处理的新特性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">openDirectory()</div><div class="line"><span class="keyword">defer</span>&#123;</div><div class="line">  closeDirectory()</div><div class="line">&#125;</div><div class="line">opeFile()</div><div class="line"><span class="keyword">defer</span> &#123;</div><div class="line">  closeFile()</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>defer会在将代码块以入栈出栈的方式延后运行，比如上面的代码会先执行打开文件夹(openDirectory)后打开文件(openFile)，在所有处理完成后，执行关闭文件(closeFile)，再关闭文件夹(closeDirectory)的操作</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看swift的代码的时候，遇见两个新的关键字，语法特性很特别&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="swift" scheme="http://seniorzhai.github.io/tags/swift/"/>
    
      <category term="关键字" scheme="http://seniorzhai.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>专用图层</title>
    <link href="http://seniorzhai.github.io/2016/08/03/%E4%B8%93%E7%94%A8%E5%9B%BE%E5%B1%82/"/>
    <id>http://seniorzhai.github.io/2016/08/03/专用图层/</id>
    <published>2016-08-03T06:05:38.000Z</published>
    <updated>2016-09-02T06:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS里有很多专用的Layer，用来处理各种不同绘制需求<br><a id="more"></a></p>
<p>##CATextLayer<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> textLayer = <span class="type">CATextLayer</span>()</div><div class="line">textLayer.frame = <span class="keyword">self</span>.view.bounds</div><div class="line"></div><div class="line"><span class="keyword">self</span>.view.layer.addSublayer(textLayer)</div><div class="line"></div><div class="line">textLayer.foregroundColor = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span></div><div class="line">textLayer.alignmentMode = kCAAlignmentJustified</div><div class="line">textLayer.wrapped = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">15</span>)</div><div class="line"><span class="keyword">let</span> fontRef = <span class="type">CGFontCreateWithFontName</span>(font.fontName)</div><div class="line">textLayer.font = fontRef</div><div class="line">textLayer.fontSize = font.pointSize</div><div class="line"><span class="type">CFRelease</span>(fontRef)</div><div class="line">textLayer.string = <span class="string">"示例文字\n示例文字"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注: 需要指定contentScale才能按设备放大系数准确渲染</p>
</blockquote>
<p><code>CATextLayer</code>的<code>font</code>属性不是一个<code>UIFont</code>类型，二是一个<code>CFTypeRef</code>类型，这样可以根据需要来使用CGFontRef还是CTFontRef</p>
<p>###富文本</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS里有很多专用的Layer，用来处理各种不同绘制需求&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图层几何学</title>
    <link href="http://seniorzhai.github.io/2016/06/26/%E5%9B%BE%E5%B1%82%E5%87%A0%E4%BD%95%E5%AD%A6/"/>
    <id>http://seniorzhai.github.io/2016/06/26/图层几何学/</id>
    <published>2016-06-26T13:10:50.000Z</published>
    <updated>2016-07-27T09:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIView有三个比较重要的布局属性：<code>frame</code>，<code>bounds</code>，<code>center</code>，对应到CALayer叫做<code>frame</code>，<code>bounds</code>，<code>position</code><br><a id="more"></a></p>
<ul>
<li><code>frame</code>代表图层的外部坐标，也就是父图层上占据的空间</li>
<li><code>bounds</code>内部坐标，{0，0}是图层的左上角</li>
<li><code>center</code>、<code>position</code>都代表了相对父图层的<code>anchorPoint</code>所在的位置<br><img src="/img/16072501.jpeg" alt=""></li>
</ul>
<p>##锚点<br>默认的anchorPoint位于图层的中点，所以图层将会以这个点为中心放置，anchorPoint属性并没有暴露个UIView接口暴露出来，这也就是视图position属性被叫做<code>center</code>，但是图层的<code>anchorPoint</code>可以被移动<br><img src="/img/16072601.jpeg" alt=""><br><code>anchorPoint</code>用单位坐标来描述，图层左上角是{0,0}，右下角是{1,1}，默认坐标是{0.5,0.5}，<code>anchorPoint</code>也可以通过指定x和y值小于或大于1，使它放置在图层范围之外。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIView有三个比较重要的布局属性：&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;center&lt;/code&gt;，对应到CALayer叫做&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;position&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>图层几何学</title>
    <link href="http://seniorzhai.github.io/2016/06/26/Hit-Testing/"/>
    <id>http://seniorzhai.github.io/2016/06/26/Hit-Testing/</id>
    <published>2016-06-26T13:10:50.000Z</published>
    <updated>2016-08-05T06:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIView有三个比较重要的布局属性：<code>frame</code>，<code>bounds</code>，<code>center</code>，对应到CALayer叫做<code>frame</code>，<code>bounds</code>，<code>position</code><br><a id="more"></a></p>
<ul>
<li><code>frame</code>代表图层的外部坐标，也就是父图层上占据的空间</li>
<li><code>bounds</code>内部坐标，{0，0}是图层的左上角</li>
<li><code>center</code>、<code>position</code>都代表了相对父图层的<code>anchorPoint</code>所在的位置<br><img src="/img/16072501.jpeg" alt=""></li>
</ul>
<p>##锚点<br>默认的anchorPoint位于图层的中点，所以图层将会以这个点为中心放置，anchorPoint属性并没有暴露个UIView接口暴露出来，这也就是视图position属性被叫做<code>center</code>，但是图层的<code>anchorPoint</code>可以被移动<br><img src="/img/16072601.jpeg" alt=""><br><code>anchorPoint</code>用单位坐标来描述，图层左上角是{0,0}，右下角是{1,1}，默认坐标是{0.5,0.5}，<code>anchorPoint</code>也可以通过指定x和y值小于或大于1，使它放置在图层范围之外。</p>
<p>##坐标系<br>一个图层的<code>position</code>依赖于它父图层的<code>bounds</code>，如果父图层发生了移动，它的所有子图层也会跟着移动<br>定义一个图层坐标系下的点或者矩形转换成另一个图层坐标系下的点或者矩形</p>
<ul>
<li><code>convertPoint(p: CGPoint, toLayer:CALayer)</code></li>
<li><code>convertPoint(p: CGPoint,toLayer:CALayer)</code></li>
<li><code>convertRect(rect: CGRect,fromLayer: CALayer)</code></li>
<li><code>convertRect(rect: CGRect,toLayer: CALayer)</code></li>
</ul>
<p>###翻转几何结构<br>通常iOS一个图层的position位于父图层的左上角，Mac OS则位于左下角，Core Animation可以通过<code>geometryFlipped</code>属性来适配这两种情况，它决定了一个图层的坐标系是否相对父图层垂直翻转。</p>
<p>###Z坐标轴<br>CALayer存在一个三维空间，除了<code>posistion</code>和<code>anchorPoint</code>属性外，CALayer还有另外两个属性，<code>zPosition</code>和<code>anchorPointZ</code>两者都是在Z轴上描述图层位置的浮点类型。<br><code>zPosition</code>决定图层显示顺序，图层根据子图层的<code>sublayers</code>出现的顺序来类绘制。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.greenView.layer.zPosition = <span class="number">1</span>.0f</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIView有三个比较重要的布局属性：&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;center&lt;/code&gt;，对应到CALayer叫做&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;position&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>CALayer</title>
    <link href="http://seniorzhai.github.io/2016/06/25/CALayer/"/>
    <id>http://seniorzhai.github.io/2016/06/25/CALayer/</id>
    <published>2016-06-25T12:29:25.000Z</published>
    <updated>2016-07-26T08:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS当中，所有的视图都从<code>UIView</code>的基类派生二来，UIView  可以处理触摸时间，可以支持基于<code>Core Graphics绘图</code>，可以做旋转或者缩放。<br><a id="more"></a></p>
<p>##CALayer<br><code>CALayer</code>类在概念上和<code>UIView</code>类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容，管理子图层的位置。和<code>UIView</code>不同的是<code>CALayer</code>不处理用户交互。<br>每一个<code>UIView</code>都有一个<code>CALayer</code>实例的图层属性，也就是所谓的<code>backing layer</code>，视图的职责就是创建并管理这个图层。<br>UIView没有暴露出一些CALayer的功能：</p>
<ul>
<li>阴影、圆角、带颜色的边框</li>
<li>3D变换</li>
<li>非矩形范围</li>
<li>透明遮罩</li>
<li>多级非线性动画</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">  contentView.backgroundColor = <span class="type">UIColor</span>.grayColor()</div><div class="line">  <span class="keyword">let</span> layer = <span class="type">CALayer</span>()</div><div class="line">  layer.frame = <span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">  layer.backgroundColor = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span></div><div class="line">  contentView.layer.addSublayer(layer)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个视图只有一个相关联的图层(自动创建)，同时也可以支持添加无数个子图层，并且把它直接添加视图关联图层的子图层</p>
<p>使用图层关联的视图而不是CALayer的好处在于，能在使用所有CALayer底层特性的同时，也可以使用UIView的高级API<br>当满足以下条件的时候，使用CALayer更为合适</p>
<ul>
<li>开发同时在Mac OS上运行的跨平台应用</li>
<li>使用多种CALayer的子类，并且不想创建额外的UIView去包装它们所有</li>
<li>做一些对性能特别挑剔的工作，比如对UIView一些可忽略不计的操作都会引起显著的不同</li>
</ul>
<p>##contents属性<br>CALayer有一个属性<code>contents</code>，这个属性的类型是id，意味着它可以是任何类的对象，给contents赋任何值，都可以编译通过，但是contents不是CGImage，那么得到的图层将是空白。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">     <span class="keyword">super</span>.viewDidLoad()</div><div class="line">     contentView.backgroundColor = <span class="type">UIColor</span>.grayColor()</div><div class="line">     <span class="keyword">let</span> layer = <span class="type">CALayer</span>()</div><div class="line">     layer.frame = <span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line"></div><div class="line">     layer.contents = <span class="type">UIImage</span>(named: <span class="string">"icon"</span>)?.<span class="type">CGImage</span></div><div class="line"></div><div class="line">     contentView.layer.addSublayer(layer)</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>简单的添加就可以显示在UIView中显示图片</p>
<p>###contentGravity<br>和UIView的contentMode一样，contentGravity可以指定内容在同层边界中对齐方式</p>
<ul>
<li>kCAGravityCenter</li>
<li>kCAGravityTop</li>
<li>kCAGravityBottom</li>
<li>kCAGravityLeft</li>
<li>kCAGravityRight</li>
<li>kCAGravityTopLeft</li>
<li>kCAGravityTopRight</li>
<li>kCAGravityBottomLeft</li>
<li>kCAGravityBottomRight</li>
<li>kCAGravityResize</li>
<li>kCAGravityResizeAspect</li>
<li>kCAGravityResizeAspectFill<br>###contentsScale<br><code>contentsScale</code>属性定义了寄宿图的像素尺寸和视图大小的比例，默认情况下它是一个值为1.0的浮点数<br>如果<code>contentsScale</code>设置为1.0，将会每个点1一个像素绘制1个像素绘制图片，如果设置为2.0，则会每两个点像素绘制图片<br>###maskToBounds<br>UIView有一个<code>clipsToBounds</code>的属性用来指定是否显示超出边界的内容，CALayer对应的属性叫做<code>maskToBounds</code><br>###contentsCenter<br>contentsCenter定义了一个固定的边框和一个图层上可拉伸的区域。改变contentsCenter的值并不会影响到寄宿图的显示。<br>默认情况下，contentsCenter是{0,0,1,1}，这意味着如果大小改变了，那么寄宿图将会均匀地拉伸开。</li>
</ul>
<p>##自定义绘制<br>给<code>contents</code>赋CGImage并不是唯一设置寄宿图的方法，也可以直接用<code>Core Graphics</code>直接绘制寄宿图，也能够继承UIView并实现<code>drawRect</code>方法来绘制<br>当视图在屏幕上显示的时候，drawRect方法会被调用，在方法里可以使用Graphics去绘制一个寄宿图。然后内容就会被缓存起来直到它需要更新（通常因为开发者调用了setNeedsDisplay方法）<br>CALayer有一个可选的delegate属性，实现了CALayerDelegate协议，当CALayer需要一个内容 特定的信息时，就会从协议中请求<code>drawLayer</code>方法，CALayerDelegate是非正式协议<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    contentView.layer.delegate = <span class="keyword">self</span></div><div class="line">    contentView.layer.display()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawLayer</span><span class="params">(layer: CALayer, inContext ctx: CGContext)</span></span> &#123;</div><div class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>)</div><div class="line">    <span class="type">CGContextSetStrokeColorWithColor</span>(ctx, <span class="type">UIColor</span>.redColor().<span class="type">CGColor</span>)</div><div class="line">    <span class="type">CGContextStrokeEllipseInRect</span>(ctx, layer.bounds)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS当中，所有的视图都从&lt;code&gt;UIView&lt;/code&gt;的基类派生二来，UIView  可以处理触摸时间，可以支持基于&lt;code&gt;Core Graphics绘图&lt;/code&gt;，可以做旋转或者缩放。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="动画" scheme="http://seniorzhai.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="view" scheme="http://seniorzhai.github.io/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>GoogleIO第一份惊喜-ConstraintLayout</title>
    <link href="http://seniorzhai.github.io/2016/05/19/GoogleIO%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%83%8A%E5%96%9C-ConstraintLayout/"/>
    <id>http://seniorzhai.github.io/2016/05/19/GoogleIO第一份惊喜-ConstraintLayout/</id>
    <published>2016-05-19T06:03:07.000Z</published>
    <updated>2016-07-12T10:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>了解iOS开发的童鞋应该知道，自iPhone6推出后，iOS也进入多屏适配时代，AutoLayout成为了适配的首选，Storyboard+AutoLayout成为了iOS布局的主要流派之一（代码适配也是不错的选择）。<br><a id="more"></a><br>拖拽组件，设定约束，一个界面就基本完成了（当然，还有一堆高级的用法）。而Android开发工程师还在苦逼地将设计稿分割，这部分用一个RelativeLayout，这部分用LinearLayout……然后嵌套一下，或者再套一层。对于很多对几大布局不是很了解的同学，往往几个界面的组成就够头痛一阵了。<br>拯救你们的救星来了，ConstraintLayout将解决你的难言之隐，还在等待什么，赶快拿起电话*&amp;……%￥(不好意思出戏了)</p>
<p>##开始<br>首先确保你的Android Studio是<a href="http://tools.android.com/download/studio/canary" target="_blank" rel="external">2.2 preview</a>或者更高版本，预览拖拽设定约束需要新的布局编辑窗口，低版本AS应该可以用ConstraintLayout，但没用设置约束功能（光手写XML，为什么还用ConstraintLayout）</p>
<p>ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  ...</div><div class="line">  compile &apos;com.android.support.constraint:constraint-layout:1.0.0-alpha&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Layout文件中引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>##使用<br><img src="/img/16051900.jpeg" alt=""><br>在布局编辑窗口中选择<code>Design</code>(我几乎是第一次选择他，而不是直接去使用TextV去写XML)<br><img src="/img/16051901.png" alt=""></p>
<p>###约束Constraints<br>约束可以帮助你设定不同组件之间的位置关系，比如，这个A组件在B组件右边25dp且位于C组件下方8dp的位置。</p>
<p>在布局编辑窗口中，当你选中一个组件可以看到以下情况<br><img src="/img/16051902.png" alt=""><br>拖拽边角的方形，可以控制组件的大小<br><img src="/img/16051903.png" alt=""><br>拖拽四边的圆形，可以设置组件相对四个方向上的距离约束<br><img src="/img/16051904.png" alt=""><br>拖拽下方圆角矩形，可以设置组件间的基线对齐</p>
<p>##基本使用<br>当拖动大小约束时，大小会被改变<br><img src="/img/16051905.gif" alt=""><br>当拖动位置约束时，锚点变绿即建立约束成功<br><img src="/img/16051906.gif" alt=""><br>当约束建立成功后，再次点击锚点即可删除约束<br><img src="/img/16051907.gif" alt=""><br>设置基线约束，可以对齐文本<br><img src="/img/16052001.gif" alt=""></p>
<p>当然拖动并不能准确的设置约束，这个时候我们看看到右边的属性窗口<br><img src="/img/16051908.jpeg" alt=""><br>在这里你可以设置组件的相关约束和组件的相关属性<br>在属性窗口中，你可以看到约束的UI界面是这样的<br><img src="/img/16051909.png" alt=""><br>每个约束是一个<code>I</code>型的图标，点击可以切换如下三个状态<br><img src="/img/16051910.png" alt=""><br>Fixed：固定尺寸约束，指定组件大小<br><img src="/img/16051911.png" alt=""><br>AnySize：占用可用空间<br><img src="/img/16051912.png" alt=""><br>Wrap Content：包含组件内容大小</p>
<p>以上可以在<a href="https://github.com/googlecodelabs/constraint-layout" target="_blank" rel="external">官方示例</a>中查看</p>
<p>##缺点</p>
<ul>
<li>UI操作并不顺畅，控件经常点击不到</li>
<li>缺少等宽等约束，复杂的需求不一定能实现</li>
<li>当ConstraintLayout不是根布局时， UI操作基本不可用<blockquote>
<p>注：以上可能是本人并不熟练或不够了解导致的</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解iOS开发的童鞋应该知道，自iPhone6推出后，iOS也进入多屏适配时代，AutoLayout成为了适配的首选，Storyboard+AutoLayout成为了iOS布局的主要流派之一（代码适配也是不错的选择）。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="AutoLayout" scheme="http://seniorzhai.github.io/tags/AutoLayout/"/>
    
      <category term="约束" scheme="http://seniorzhai.github.io/tags/%E7%BA%A6%E6%9D%9F/"/>
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="Layout" scheme="http://seniorzhai.github.io/tags/Layout/"/>
    
  </entry>
  
  <entry>
    <title>Weex初探</title>
    <link href="http://seniorzhai.github.io/2016/05/10/Weex%E5%88%9D%E6%8E%A2/"/>
    <id>http://seniorzhai.github.io/2016/05/10/Weex初探/</id>
    <published>2016-05-10T09:53:42.000Z</published>
    <updated>2016-05-12T11:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>目前weex还在内测阶段，还是一个github的私有项目</p>
<p>##基础环境</p>
<ul>
<li>Node.js 4.0+</li>
<li>Android SDK</li>
<li>Android Studio<br>##如何开始<br>clone项目，在项目目录下执行<code>npm install</code>,<code>./start</code><br>将<code>android/playground/app/java/com/alibaba/weex/WXMainActivity</code>修改<code>CURRENT_IP</code>将本地IP<br>之后运行项目<br>##简单的使用<br>可以看到weex的写法和原生的html很像，简单的hello weex如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">"style-size:100px;"</span>&gt;</span>Hello weex!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;目前weex还在内测阶段，还是一个github的私有项目&lt;/p&gt;
&lt;p&gt;##基础环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 4.0+&lt;/li&gt;
&lt;li&gt;Android SDK&lt;/li&gt;
&lt;li&gt;Android Studio&lt;br&gt;##
    
    </summary>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
    
      <category term="Android" scheme="http://seniorzhai.github.io/tags/Android/"/>
    
      <category term="weex" scheme="http://seniorzhai.github.io/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView的使用</title>
    <link href="http://seniorzhai.github.io/2016/04/25/UIStackView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://seniorzhai.github.io/2016/04/25/UIStackView的使用/</id>
    <published>2016-04-25T06:28:56.000Z</published>
    <updated>2016-04-29T05:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Stack View是一个方便垂直或水平排布subView，与Android中的LinearLayout非常相似。<br><a id="more"></a></p>
<p>##布局<br>使用Stack View在Attributes Inspector中，Axis表示Stack View的SubView是水平排布还是垂直布局。Alignment控制SubView的对齐方式。Distribution定义SubView的分布方式。Spacing为SubView间的最小间距。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stack View是一个方便垂直或水平排布subView，与Android中的LinearLayout非常相似。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ProGuard详解</title>
    <link href="http://seniorzhai.github.io/2016/04/11/ProGuard%E8%AF%A6%E8%A7%A3/"/>
    <id>http://seniorzhai.github.io/2016/04/11/ProGuard详解/</id>
    <published>2016-04-11T06:16:42.000Z</published>
    <updated>2016-04-11T07:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>ProGuard包括4各功能：</p>
<ul>
<li>压缩(Shrink) 移除代码中无用的类、字段、方法、和特性</li>
<li>优化(Optimize) 对字节码进行优化，移除无用的指令</li>
<li>混淆(Obfuscate) 使用剪短无意义的名称对类、字段、方法重命名</li>
<li>预检(Preveirfy) 在Java平台上对处理后的代码进行预检</li>
</ul>
<p>##ProGuard的工作原理<br>ProGuard由<code>Shrink</code>,<code>Optimize</code>,<code>Obfuscate</code>,<code>Preveirfy</code>四个步骤组成，其中每个步骤都是可选的</p>
<p>##编写ProGuard文件</p>
<ol>
<li>基本指令</li>
</ol>
<ul>
<li>代码混淆压缩比，在0~7之间，默认为5，<code>-optimizationpasses 5</code></li>
<li>混淆时不使用大小写混合，混淆的类名为小写 <code>-dontusemixedcaseclassnames</code></li>
<li>指定不去忽略废公共的库的类 <code>-dontskipnonpubliclibaryclasses</code></li>
<li>指定不去忽略废公共的库的类的成员 <code>-dontskipnonpubliclibaryclassesmembers</code></li>
<li>不做预校验 <code>-dontpreverify</code></li>
<li>生成映射文件 <code>-verbose</code></li>
<li>使用printmapping指定映射文件的名称 <code>-printmapping proguardMapping.txt</code></li>
<li>指定混淆时采用的算法 <code>-optimizations ! code/ simplification/ arithmetic,!fiedld/*,class/merging/*</code></li>
<li>保护代码中的Annotation不被混淆 <code>-keepattributes *Annotation*</code></li>
<li>避免混淆泛型 <code>-keepattributes Signature</code></li>
<li>抛出异常时保留代码行数 <code>-keepattributes SourceFile,LineNumberTable</code></li>
</ul>
<ol>
<li>需要保留的</li>
</ol>
<ul>
<li><p>保留本地native方法不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- keepclasseswithmembernames class * &#123;</div><div class="line">  native &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留某些子类不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- keep public class * extends android.app.Activity</div></pre></td></tr></table></figure>
</li>
<li><p>保护在XML中设置onClick不被影响</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- keepclassmembers class * extends android.app.Activity &#123;</div><div class="line">  public void *(android.view.View);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保护Fragment <code>- keep public class android.support.v4.app.Fragment.** {*;}</code></p>
</li>
<li><p>保留枚举不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- keepclassmembers enum * &#123;</div><div class="line">  public static **&#123;&#125; values();</div><div class="line">  public static ** valueOf(Java.lang.String);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留自定义控件不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- keep public class * extends android.view.View &#123;</div><div class="line">  *** get*();</div><div class="line">  void set*(***);</div><div class="line">  public &lt;init&gt;(android.content.Context);</div><div class="line">  public &lt;init&gt;(android.content.Context,android.util.ArrtibuteSet);</div><div class="line">  public &lt;init&gt;(android.content.Context,android.util.ArrtibuteSet,int);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留Parcelable序列化不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- keep class * implements android.os.Parcelable &#123;</div><div class="line">  public static final android.os.Parcelable$Creator *;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留Serializable序列化类不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- keepclassemembers class * implements java.io.Serializable &#123;</div><div class="line">  static final long serialVersionID;</div><div class="line">  private static final java.io.ObjectStreamField[] serialPersistentFields;</div><div class="line">  private void writeObject(java.io.ObjectOutputStream);</div><div class="line">  private void readObject(java.io.ObjectInputStream);</div><div class="line">  java.lang.Object writeReplace();</div><div class="line">  java.lang.Object readResolve();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留R文件下的资源不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- keep class **.R$&#123;*;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保留内部类不被混淆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- keep class com.example.app.ui.MainActivity$*&#123;*;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对WebView的处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- keepclassmembers class * extends android.webkit.webViewClient &#123;</div><div class="line">  public void *(android.webkit.WebView,java.lang.String,android.graphics.Bitmap);</div><div class="line">  public boolean *(android.webkit.WebView,java.lang.String);</div><div class="line">&#125;</div><div class="line">- keepclassmembers class * extends android.webkit.webViewClient &#123;</div><div class="line">  public void *(android.webkit.webView,java.lang.String);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对JavaScript</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- keepclassemembers class com.example.app.MainActivity$JSInterface &#123;</div><div class="line">  &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>针对第三方库的混淆保护<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- libraryjas libs/android-support-v4.jar</div><div class="line">- dontwarn android.support.v4.**</div><div class="line">- keep class android.support.v4.**&#123;*;&#125;</div><div class="line">- kepp interface android.support.v4.app.**&#123;*;&#125;</div><div class="line">- kepp public class * extends android.support.v4.**</div><div class="line">- keep public class * extends android.app.Fragment</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ProGuard包括4各功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩(Shrink) 移除代码中无用的类、字段、方法、和特性&lt;/li&gt;
&lt;li&gt;优化(Optimize) 对字节码进行优化，移除无用的指令&lt;/li&gt;
&lt;li&gt;混淆(Obfuscat
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="ProGuard" scheme="http://seniorzhai.github.io/tags/ProGuard/"/>
    
      <category term="混淆" scheme="http://seniorzhai.github.io/tags/%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>在Drawable里指定ripple</title>
    <link href="http://seniorzhai.github.io/2016/03/15/%E5%9C%A8Drawable%E9%87%8C%E6%8C%87%E5%AE%9Aripple/"/>
    <id>http://seniorzhai.github.io/2016/03/15/在Drawable里指定ripple/</id>
    <published>2016-03-15T03:05:29.000Z</published>
    <updated>2016-03-15T03:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>在<code>drawable</code>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/darker_gray"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>drawable-v21</code>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:color</span>=<span class="string">"@android:color/darker_gray"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在&lt;code&gt;drawable&lt;/code&gt;中&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;d
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="ripple" scheme="http://seniorzhai.github.io/tags/ripple/"/>
    
  </entry>
  
  <entry>
    <title>使用jadx</title>
    <link href="http://seniorzhai.github.io/2016/03/10/%E4%BD%BF%E7%94%A8jadx/"/>
    <id>http://seniorzhai.github.io/2016/03/10/使用jadx/</id>
    <published>2016-03-10T06:11:00.000Z</published>
    <updated>2016-03-10T09:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>#使用<br>将<a href="https://github.com/skylot/jadx" target="_blank" rel="external">jadx</a>克隆到本地，进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/skylot/jadx</div><div class="line">cd jadx</div><div class="line">./gradlew dist</div></pre></td></tr></table></figure></p>
<p>编译完成后可以在<code>build/jadx/bin</code>中找到运行文件</p>
<p>##运行<br>GUI界面可以点击运行<code>jadx-gui</code>文件<br>命令行可以使用<code>./jadx</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jadx demo.apk</div></pre></td></tr></table></figure></p>
<ul>
<li>命令格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">jadx[-gui] [options] &lt;input file&gt; (.dex , .apk , .jar or .class)</div><div class="line">options:</div><div class="line">  -d,--output-dir         指定输出文件夹</div><div class="line">  -j,--threads-count      执行线程数量</div><div class="line">  -f,--fallback</div><div class="line">  -r,--no-res             不解码资源文件</div><div class="line">  -s,--no-src             不反编代码</div><div class="line">     --show-bad-code      显示不正确的反编译代码</div><div class="line">     --cfg                </div><div class="line">     --raw-cfg</div><div class="line">  -v,--verbose            详细输出</div><div class="line">     --deobf              激活deofuscation</div><div class="line">     --deobf-min</div><div class="line">     --deobf-max</div><div class="line">     --deobf-rewrite-cfg</div><div class="line">  -h,--help</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>–deobf –deobf-rewrite-cfg</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#使用&lt;br&gt;将&lt;a href=&quot;https://github.com/skylot/jadx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jadx&lt;/a&gt;克隆到本地，进行编译&lt;br&gt;&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="反编译" scheme="http://seniorzhai.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin简单的开始</title>
    <link href="http://seniorzhai.github.io/2016/02/18/Kotlin%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://seniorzhai.github.io/2016/02/18/Kotlin简单的开始/</id>
    <published>2016-02-18T09:23:49.000Z</published>
    <updated>2016-03-10T09:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>##安装Kotlin插件</p>
<ul>
<li>Kotlin 使Android Studio可以识别kotlin代码</li>
<li>Kotlin Android Extensions 使Android Studio可以自动地从XML中注入所有的View到Activity</li>
</ul>
<p>##修改Gradle<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'kotlin-android'</span></div><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">sourceSets</span> &#123;</div><div class="line">    main.java.srcDirs += <span class="string">'src/main/kotlin'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  ...    </div><div class="line">  <span class="keyword">compile</span> <span class="string">"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    ext.kotlin_version = <span class="string">'1.0.0'</span></div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>PS：未修改处省略</p>
<p>##修改MainActivity<br>选择MainActivity.java-&gt;Code-&gt;Convert Java File to Kotlin File</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##安装Kotlin插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin 使Android Studio可以识别kotlin代码&lt;/li&gt;
&lt;li&gt;Kotlin Android Extensions 使Android Studio可以自动地从XM
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="http://seniorzhai.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>(转)ReactNative-ES5 ES6写法对照</title>
    <link href="http://seniorzhai.github.io/2016/01/25/-%E8%BD%AC-ReactNative-ES5-ES6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7/"/>
    <id>http://seniorzhai.github.io/2016/01/25/-转-ReactNative-ES5-ES6写法对照/</id>
    <published>2016-01-25T12:37:20.000Z</published>
    <updated>2016-01-26T02:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>转至<a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2" target="_blank" rel="external">http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2</a><br>很多<code>React/React Native</code>的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。</p>
<p>##模块</p>
<p>###引用<br>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">"react-native"</span>);</div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    Image,</div><div class="line">    Text,</div><div class="line">    PropTypes</div><div class="line">&#125; = React;  <span class="comment">//引用不同的React Native组件</span></div></pre></td></tr></table></figure></p>
<p>在ES6里，import写法更为标准<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">import</span> React, &#123;</div><div class="line">    Image,</div><div class="line">    Text,</div><div class="line">    PropTypes</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意在React Native里，import直到0.12+才能正常运作。</p>
</blockquote>
<p>###导出单个类<br>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = MyComponent;</div></pre></td></tr></table></figure></p>
<p>在ES6里，通常用export default来实现相同的功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>引用的时候也类似：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> MyComponent = <span class="built_in">require</span>(<span class="string">'./MyComponent.js'</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent.js'</span>;</div></pre></td></tr></table></figure>
<p>###定义组件<br>在ES5里，通常通过React.createClass来定义一个组件类，像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###给组件定义方法<br>从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</div><div class="line">    componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    componentWillMount() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###定义组件的属性类型和默认属性<br>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</div><div class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            autoPlay: <span class="literal">false</span>,</div><div class="line">            maxLoops: <span class="number">10</span>,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    propTypes: &#123;</div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">        maxLoops: React.PropTypes.number.isRequired,</div><div class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">        videoSrc: React.PropTypes.string.isRequired,</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在ES6里，可以统一使用static成员来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">        autoPlay: <span class="literal">false</span>,</div><div class="line">        maxLoops: <span class="number">10</span>,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    <span class="keyword">static</span> propTypes = &#123;</div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">        maxLoops: React.PropTypes.number.isRequired,</div><div class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">        videoSrc: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125; // 注意这里既没有分号也没有逗号</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Video.defaultProps = &#123;</div><div class="line">    autoPlay: false,</div><div class="line">    maxLoops: 10,</div><div class="line">&#125;;</div><div class="line">Video.propTypes = &#123;</div><div class="line">    autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">    maxLoops: React.PropTypes.number.isRequired,</div><div class="line">    posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">    videoSrc: React.PropTypes.string.isRequired,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。</p>
</blockquote>
<p>###初始化state<br>ES5下情况类似，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>ES6下，有两种写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    state = &#123;</div><div class="line">        loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把方法作为回调提供<br>很多习惯于ES6的用户反而不理解在ES5下可以这么做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> PostInfo = React.createClass(&#123;</div><div class="line">    handleOptionsButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="comment">// Here, 'this' refers to the component instance.</span></div><div class="line">        <span class="keyword">this</span>.setState(&#123;showOptionsModal: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight onPress=&#123;this.handleOptionsButtonClick&#125;&gt;</div><div class="line">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p>
<p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    handleOptionsButtonClick(e)&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;showOptionsModal: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress=&#123;this.handleOptionsButtonClick.bind(this)&#125;</div><div class="line">                onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125;</div><div class="line">                &gt;</div><div class="line">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 箭头函数的例子</span></div><div class="line">()=&gt;<span class="number">1</span></div><div class="line">v=&gt;v+<span class="number">1</span></div><div class="line">(a,b)=&gt;a+b</div><div class="line">()=&gt;&#123;</div><div class="line">    alert(<span class="string">"foo"</span>);</div><div class="line">&#125;</div><div class="line">e=&gt;&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1000</span>/e;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误的做法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    componentDidUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 正确的做法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>._onAppPaused = <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentDidUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从这个帖子中我们还学习到一种新的做法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确的做法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentDidUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused = (event) =&gt; &#123;</div><div class="line">        <span class="comment">//把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###Mixins<br>在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PureRenderMixin = <span class="built_in">require</span>(<span class="string">'react-addons-pure-render-mixin'</span>);</div><div class="line">React.createClass(&#123;</div><div class="line">  mixins: [PureRenderMixin],</div><div class="line"></div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &lt;div className=&#123;this.props.className&#125;&gt;foo&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。</p>
<p>尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案</p>
<p>不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Enhance.js</span></div><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">"React"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> Enhance = ComposedComponent =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.state = &#123; data: <span class="literal">null</span> &#125;;</div><div class="line">    &#125;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123; data: <span class="string">'Hello'</span> &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;ComposedComponent &#123;...this.props&#125; data=&#123;this.state.data&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//HigherOrderComponent.js</div><div class="line">import &#123; Enhance &#125; from "./Enhance";</div><div class="line"></div><div class="line">class MyComponent &#123;</div><div class="line">    render() &#123;</div><div class="line">        if (!this.data) return &lt;div&gt;Waiting...&lt;/div&gt;;</div><div class="line">        return &lt;div&gt;&#123;this.data&#125;&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Enhance(MyComponent); // Enhanced component</div></pre></td></tr></table></figure></p>
<p>用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p>
<p>##ES6+带来的其它好处</p>
<p>###解构&amp;属性延展　<br>结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoloadingPostsGrid</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">var</span> &#123;</div><div class="line">            className,</div><div class="line">            ...others,  <span class="comment">// contains all properties of this.props except for className</span></div><div class="line">        &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;className&#125;&gt;</div><div class="line">                &lt;PostsGrid &#123;...others&#125; /&gt;</div><div class="line">                &lt;button onClick=&#123;this.handleLoadMoreClick&#125;&gt;Load more&lt;/button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面这种写法，则是传递所有属性的同时，用覆盖新的className值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div &#123;...this.props&#125; className=<span class="string">"override"</span>&gt;</div><div class="line">    …</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div className=<span class="string">"base"</span> &#123;...this.props&#125;&gt;</div><div class="line">    …</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转至&lt;a href=&quot;http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2&quot; target=
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="SE5" scheme="http://seniorzhai.github.io/tags/SE5/"/>
    
      <category term="SE6" scheme="http://seniorzhai.github.io/tags/SE6/"/>
    
      <category term="ReactNative" scheme="http://seniorzhai.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative-Flex</title>
    <link href="http://seniorzhai.github.io/2016/01/23/ReactNative-Flex/"/>
    <id>http://seniorzhai.github.io/2016/01/23/ReactNative-Flex/</id>
    <published>2016-01-22T18:29:50.000Z</published>
    <updated>2016-01-24T13:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><img src="/img/16012301.png" alt=""><br><img src="/img/16012302.png" alt=""><br><a href="https://github.com/SeniorZhai/FlexDemo" target="_blank" rel="external">https://github.com/SeniorZhai/FlexDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/img/16012301.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/16012302.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/SeniorZhai/
    
    </summary>
    
      <category term="ReactNative" scheme="http://seniorzhai.github.io/categories/ReactNative/"/>
    
    
      <category term="Flex" scheme="http://seniorzhai.github.io/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>简单配置</title>
    <link href="http://seniorzhai.github.io/2016/01/22/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://seniorzhai.github.io/2016/01/22/简单配置/</id>
    <published>2016-01-22T04:10:49.000Z</published>
    <updated>2016-01-22T09:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了一段时间Atom来写React，觉得还是不够好用，虽然漂亮<br><a id="more"></a><br>重回老路，配置下WebStrom，发现也还可以</p>
<p>最新的版本，是WebStrom 11，好像激活的方法有变更，不复述。<br><a href="http://www.oschina.net/question/1184821_2142539?fromerr=tlf5g1xd" target="_blank" rel="external">http://www.oschina.net/question/1184821_2142539?fromerr=tlf5g1xd</a></p>
<p>关于Code Theme方面，这款<a href="http://color-themes.com/?view=theme&amp;id=563a1a6180b4acf11273ae3d" target="_blank" rel="external">Obsidian</a>也是不错的选择。</p>
<p>为了方便开发，我还配置了一些Live Templeates，简单的处理下一个组件的初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>)</div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    &#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> $NAME$ = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span>$END$<span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">exports.module = $NAME$;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了一段时间Atom来写React，觉得还是不够好用，虽然漂亮&lt;br&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://seniorzhai.github.io/categories/ReactNative/"/>
    
    
      <category term="配置" scheme="http://seniorzhai.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Atom" scheme="http://seniorzhai.github.io/tags/Atom/"/>
    
      <category term="WebStrom" scheme="http://seniorzhai.github.io/tags/WebStrom/"/>
    
      <category term="Sublime" scheme="http://seniorzhai.github.io/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>SystemUI与FitsSystemWindows</title>
    <link href="http://seniorzhai.github.io/2016/01/20/SystemUI%E4%B8%8EFitsSystemWindows/"/>
    <id>http://seniorzhai.github.io/2016/01/20/SystemUI与FitsSystemWindows/</id>
    <published>2016-01-20T04:30:17.000Z</published>
    <updated>2016-01-21T09:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在亘古时代(Android 2.+)的时候，全屏操作简单粗暴，但是切换显示、隐藏时丑陋之极。<br><a id="more"></a></p>
<ul>
<li><p>在theme中设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line">  android:theme="@android:style/Theme.Holo.NaoActionBar.Fullscreen"</div><div class="line">...</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在activity渲染之前</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">16</span>) &#123;</div><div class="line">      getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line">    &#125;</div><div class="line">    setContentView(...);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>因为设置了WindowManager的flag，想要切换只能重置flag，而且因为大小变了，activity的界面也会改变。</p>
<p>在改革春风吹满地的新时代(Android 4.0+)，SDK提供了我们新的选择，使用setSystemUiVisibility()来操控SystemUI，这里不只StatusBar还有NavigationBar</p>
<p>##4.0可使用的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">View decorView = getWindow().getDecorView();</div><div class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;</div><div class="line">decorView.setSystemUiVisibilit(uiOptions);</div></pre></td></tr></table></figure></p>
<ul>
<li>触摸屏幕任何位置都会使得导航、状态栏出现，且<code>SYSTEM_UI_FLAG_HIDE_NAVIGATION</code>被清除</li>
<li>一旦标志位被清除，需要重新设置</li>
<li>在不用地方UI FLAG是不同的，所有最好在onReasume()和onWindowFocusChaned()中设置</li>
<li>被调用的View显示时才会生效<br>##4.1以后<br>上面的方法设置后，内容还是会因为场景的变化而变化，所以我们需要让我们的内容放在SystemUI的后面<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">View decorView = getWindow().getDecorView();</div><div class="line"><span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;</div><div class="line">decorView.setSystemUiVisibilit(uiOptions);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>值得注意的是，有些控件我们是不希望不覆盖住的，比如toolbar，这个时候需要给它加上FitsSystemWindows属性，保证不会被SystemUI遮住。<br>从示例上看，系统会为View设置上Padding，所以，如果要做切换时，可能要考虑还原View的Padding。</p>
<p>#示例<br><a href="https://github.com/SeniorZhai/SystemUI" target="_blank" rel="external">https://github.com/SeniorZhai/SystemUI</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在亘古时代(Android 2.+)的时候，全屏操作简单粗暴，但是切换显示、隐藏时丑陋之极。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gradle下载地址</title>
    <link href="http://seniorzhai.github.io/2016/01/18/gradle%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
    <id>http://seniorzhai.github.io/2016/01/18/gradle下载地址/</id>
    <published>2016-01-18T14:19:42.000Z</published>
    <updated>2016-01-23T20:13:11.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><a href="https://services.gradle.org/distributions/" target="_blank" rel="external">https://services.gradle.org/distributions/</a></p>
<p>放到<code>~/.gradle/wrapper/dists</code>目录下</p>
<blockquote>
<p>不知道是不是我环境的问题，用P2P下载文件一直有问题，还是直接下载的好</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://services.gradle.org/distributions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://services.gradle.org/distrib
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative-ListView</title>
    <link href="http://seniorzhai.github.io/2016/01/17/ReactNative-ListView/"/>
    <id>http://seniorzhai.github.io/2016/01/17/ReactNative-ListView/</id>
    <published>2016-01-17T15:26:29.000Z</published>
    <updated>2016-01-17T15:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative-Navigator</title>
    <link href="http://seniorzhai.github.io/2016/01/17/ReactNative-Navigator/"/>
    <id>http://seniorzhai.github.io/2016/01/17/ReactNative-Navigator/</id>
    <published>2016-01-17T15:22:02.000Z</published>
    <updated>2016-01-17T15:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>#基本用法<br>Navigator可以切换不同场景，导航器通过路由来分辨不同的场景。<br><code>renderScene</code>方法用来指定渲染的场景，<code>configureScene</code>属性指定路由对象的配置信息，可以指定进场动画或者手势。</p>
<p>#方法</p>
<ul>
<li><code>getCurrentRoutes()</code> 获取当前栈里的路由</li>
<li><code>jumpBack()</code> 跳回之前的路由，当前场景保留</li>
<li><code>jumpForward()</code> 跳回之后的路由</li>
<li><code>jumpTo(route)</code> 跳转到已有的场景并且不卸载</li>
<li><code>push(route)</code> 跳转到新的场景</li>
<li><code>pop()</code> 跳转出去并且卸载当前场景</li>
<li><code>replace(route)</code> 用一个新的路由替换掉当前场景</li>
<li><code>replaceAtIndex(rote,index)</code> 替换掉指定序列的场景</li>
<li><code>replacePrevious(route)</code> 替换掉之前的场景</li>
<li><code>immediatelyResetRouteStack(routeStack)</code>  用新的路由重置路由栈</li>
<li><code>popToRoute(route)</code> pop到路由指定的场景，其他的场景将被卸载</li>
<li><code>popToTp()</code> pop到栈中单第一个场景，卸载掉所有的其他场景<br>#属性</li>
<li><code>configureScene</code> 可选函数，用来指定场景动画和手势</li>
<li><code>initialRoute</code> 指定启动时加载的路由</li>
<li><code>initialRouteStack</code> 指定一个路由集合来初始化</li>
<li><code>navigatorBar</code> 可选参数，提供一个场景切换时保持的导航栏</li>
<li><code>navigator</code> 可选参数，提供父类导航获取导航器对象</li>
<li><code>renderScene</code> 必选参数，用来指定路由渲染的场景</li>
<li><code>sceneStyle</code> 指定每个场景的容器上的样式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#基本用法&lt;br&gt;Navigator可以切换不同场景，导航器通过路由来分辨不同的场景。&lt;br&gt;&lt;code&gt;renderScene&lt;/code&gt;方法用来指定渲染的场景，&lt;code&gt;configureScene&lt;/code&gt;属性指定路由对象的
    
    </summary>
    
      <category term="ReactNative" scheme="http://seniorzhai.github.io/categories/ReactNative/"/>
    
    
      <category term="Navigator" scheme="http://seniorzhai.github.io/tags/Navigator/"/>
    
      <category term="路由" scheme="http://seniorzhai.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="切换" scheme="http://seniorzhai.github.io/tags/%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
</feed>
