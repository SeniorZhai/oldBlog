<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeniorZhai&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/9aee8a6631255e55e0e5149eef40edd2</icon>
  <subtitle>苟利国家生死以，起因福祸趋避之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seniorzhai.github.io/"/>
  <updated>2018-07-24T06:40:34.198Z</updated>
  <id>http://seniorzhai.github.io/</id>
  
  <author>
    <name>Dear宅学长</name>
    <email>developer.zhaitao@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>electron初识</title>
    <link href="http://seniorzhai.github.io/2018/07/24/electron%E5%88%9D%E8%AF%86/"/>
    <id>http://seniorzhai.github.io/2018/07/24/electron初识/</id>
    <published>2018-07-24T03:46:16.000Z</published>
    <updated>2018-07-24T06:40:34.198Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="从quickstart开始"><a href="#从quickstart开始" class="headerlink" title="从quickstart开始"></a>从quickstart开始</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/electron/electron-quick-start</span><br><span class="line">cd electron-quick-start</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>可以看到一个简单的electron桌面程序启动了</p><p>Electron中分为两类进程，一类是主进程main，另一类是渲染器进程renderer<br>主进程只有一个，负责对整个应用的管理，包括后台操作，创建GUI，处理GUI和后台交互操作<br>主进程无法显示窗口，在主进程中调用BrowserWindow模块才能使用不同的窗口，每个窗口调用格子的渲染器进程来讲页面渲染到窗口中<br>由于在网页里管理原生GUI资源是非常危险而且容易造成资源泄露，所以在网页调用GUI相关API是不允许的，如果要在网页中使用GUI操作，其相对应的渲染进程必须和主进程进行通讯，请求主进程进行相关GUI操作</p><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><p>工程目录如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- index.html</span><br><span class="line">- main.js</span><br><span class="line">- renderer.js</span><br><span class="line">- package.json</span><br></pre></td></tr></table></figure></p><p><code>package.json</code>声明了启动脚本，和进程的入口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有声明main，Electron会优先加载<code>index.js</code></p><p><code>main.js</code>创建窗口和处理系统时间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APP生命周期模块 原生浏览器窗口模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="comment">// 保持一个全局的window引用，当JS被GC window不会自动关闭</span></span><br><span class="line"><span class="keyword">let</span> mainWindow</span><br><span class="line"><span class="comment">// 创建窗口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</span><br><span class="line">  <span class="comment">// 加载应用的index.html</span></span><br><span class="line">  mainWindow.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="comment">// 打开开发工具</span></span><br><span class="line">  <span class="comment">// mainWindow.openDevTools()</span></span><br><span class="line">  mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// window关闭时取消引用</span></span><br><span class="line">    mainWindow = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Electron完成初始化准备创建窗口时调用</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当窗口被关闭，退出</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="comment">// 判断OS X上，关闭时退出程序</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;从quickstart开始&quot;&gt;&lt;a href=&quot;#从quickstart开始&quot; class=&quot;headerlink&quot; title=&quot;从quickstart开始&quot;&gt;&lt;/a&gt;从quickstart开始&lt;/h2&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="electron" scheme="http://seniorzhai.github.io/categories/electron/"/>
    
    
      <category term="js" scheme="http://seniorzhai.github.io/tags/js/"/>
    
      <category term="node" scheme="http://seniorzhai.github.io/tags/node/"/>
    
      <category term="electron" scheme="http://seniorzhai.github.io/tags/electron/"/>
    
      <category term="desktop" scheme="http://seniorzhai.github.io/tags/desktop/"/>
    
  </entry>
  
  <entry>
    <title>Android交叉编译Cmake</title>
    <link href="http://seniorzhai.github.io/2018/07/21/Android%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91Cmake/"/>
    <id>http://seniorzhai.github.io/2018/07/21/Android交叉编译Cmake/</id>
    <published>2018-07-21T03:51:17.000Z</published>
    <updated>2018-07-20T07:05:03.161Z</updated>
    
    <content type="html"><![CDATA[<p>CMake是一个开源的跨平台自动化构建系统<br><a id="more"></a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>使用<code>#</code>作为注释</li><li>使用<code>${}</code>取值，在IF控制语句中直接使用变量名</li><li>指令名(参数1 参数2……)，其中参数之间使用空格或分好隔开</li><li>指令与大小写无关，但是参数和变量大小写相关<blockquote><p>指令大小写无关，官方建议使用大写，不过Android的Cmake指令是小写，便于阅读</p></blockquote></li></ul><h2 id="CMake常用指令"><a href="#CMake常用指令" class="headerlink" title="CMake常用指令"></a>CMake常用指令</h2><ul><li><p><code>project(&lt;projectname&gt;[CXX][C][Java])</code><br>定义工程名并制定支持的语言，默认支持所有语言<br>此条指令隐式定义了两个变量：<code>&lt;project&gt;_BINARY_DIR</code>和<code>&lt;project&gt;_SOURCE_DIR</code></p></li><li><p><code>set(VAR [VALUE])</code><br>显式定义变量，多个变量使用空格或分号隔开</p></li><li><p><code>message([SEND_ERROR|STATUS|FATAL_ERROR]&quot;message to display&quot;)</code><br>这个指令用于向终端输出用户定义的信息，包含了三种类型：<br>SEND_ERROR，产生错误，生成过程被跳过<br>STATUS，输出前缀为—-的信息；（由上面例子也可以看到会在终端输出相关信息）<br>FATAL_ERROR，立即终止所有 CMake 过程</p></li><li><p><code>add_executable(executable_file_name [source])</code><br>将一组源文件 source 生成一个可执行文件。 source 可以是多个源文件，也可以是对应定义的变量</p></li><li><p><code>cmake_minimun_required(VERSION 3.4.1)</code><br>用来指定 CMake 最低版本为3.4.1</p></li></ul><p>CMakeList.txt<br>定义了需要编译的文件以及其他库的关系</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CMake是一个开源的跨平台自动化构建系统&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac配置Open CV配置环境</title>
    <link href="http://seniorzhai.github.io/2018/07/20/Mac%E9%85%8D%E7%BD%AEOpen-CV%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://seniorzhai.github.io/2018/07/20/Mac配置Open-CV配置环境/</id>
    <published>2018-07-20T06:55:51.000Z</published>
    <updated>2018-07-20T08:11:34.114Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="下载安装-cmake"><a href="#下载安装-cmake" class="headerlink" title="下载安装 cmake"></a>下载安装 cmake</h1><p><a href="http://cmake.org/" target="_blank" rel="noopener">http://cmake.org/</a></p><h1 id="下载-opencv"><a href="#下载-opencv" class="headerlink" title="下载 opencv"></a>下载 opencv</h1><p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">https://opencv.org/releases.html</a></p><h1 id="编译-open-cv"><a href="#编译-open-cv" class="headerlink" title="编译 open cv"></a>编译 open cv</h1><p>download <a href="http://www.opencv.org" target="_blank" rel="noopener">www.opencv.org</a> </p><p>open cmake<br>选择 opencv opencv/build<br>configure-&gt;generate</p><h1 id="安装-open-cv"><a href="#安装-open-cv" class="headerlink" title="安装 open cv"></a>安装 open cv</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd opencv/build</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="配置-xcode"><a href="#配置-xcode" class="headerlink" title="配置 xcode"></a>配置 xcode</h1><p>在<code>build setting</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header search paths -&gt; /usr/local/include</span><br><span class="line">library search paths -&gt; /usr/local/lib</span><br><span class="line">other linker flags -&gt; add opencv/build/lib/ # 添加所有动态库</span><br></pre></td></tr></table></figure></p><p>为了方便，我们将图片路径以Argument是方式传入Main函数<br>Product-&gt;Scheme-&gt;Edit -Scheme&gt;Run-&gt;Arguments</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;下载安装-cmake&quot;&gt;&lt;a href=&quot;#下载安装-cmake&quot; class=&quot;headerlink&quot; title=&quot;下载安装 cmake&quot;&gt;&lt;/a&gt;下载安装 cmake&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://cmak
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://seniorzhai.github.io/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://seniorzhai.github.io/tags/OpenCV/"/>
    
      <category term="C++" scheme="http://seniorzhai.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Flutter初试</title>
    <link href="http://seniorzhai.github.io/2018/06/30/Flutter%E5%88%9D%E8%AF%95/"/>
    <id>http://seniorzhai.github.io/2018/06/30/Flutter初试/</id>
    <published>2018-06-30T06:41:36.000Z</published>
    <updated>2018-07-02T05:21:41.360Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>在 <a href="https://flutter.io/sdk-archive/#macos" target="_blank" rel="noopener">https://flutter.io/sdk-archive/#macos</a> 下载Flutter SDK<br>解压后讲路径加入PATH <code>export PATH=/flutter/bin:$PATH</code><br>配置完成后运行<code>flutter doctor</code>根据提醒配置环境</p><p>###配置IDE<br>在扩展栏中搜索<code>Flutter</code> 安装Flutter 插件</p><p>##创建项目<br><code>shift+command+p</code>-&gt;<code>Flutter New Project</code>创建项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装与配置&quot;&gt;&lt;a href=&quot;#安装与配置&quot; class=&quot;headerlink&quot; title=&quot;安装与配置&quot;&gt;&lt;/a&gt;安装与配置&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://flutter.io/sdk-archiv
      
    
    </summary>
    
      <category term="Flutter" scheme="http://seniorzhai.github.io/categories/Flutter/"/>
    
    
      <category term="iOS" scheme="http://seniorzhai.github.io/tags/iOS/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="http://seniorzhai.github.io/2017/02/28/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://seniorzhai.github.io/2017/02/28/vim常用命令/</id>
    <published>2017-02-28T08:43:01.000Z</published>
    <updated>2018-06-29T04:42:18.710Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><code>/&lt;关键字&gt;</code><br><code>:&lt;行号&gt;</code><br><code>dd</code>剪切<br><code>yy</code>复制<br><code>p</code>粘贴<br><code>u</code>撤销<br><code>ctrl+r</code>重做<br><code>w</code> 保存<br><code>wq</code>保存退出<br><code>q!</code>退出</p><p>find + xargs + grep<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find -name Activity.java</span><br><span class="line">find -name &apos;*.java&apos;</span><br><span class="line">find -name &apos;*.java&apos; | xarfs grep &apos;extends[ \t\n]+ActiviyManagerNative&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Android.mk</span><br><span class="line">LOCAL_SHARED_LIBRARIES := libutils</span><br><span class="line"></span><br><span class="line">#include &lt;utils/Call.Stack.h&gt;</span><br><span class="line"></span><br><span class="line">CallStack stack;</span><br><span class="line">stack.update();</span><br><span class="line">stack.log(&quot;tag&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ninja: build stopped: subcommand failed.</span><br><span class="line">build/core/ninja.mk:148: recipe for target &apos;ninja_wrapper&apos; failed</span><br><span class="line">make: *** [ninja_wrapper] Error 1</span><br><span class="line"></span><br><span class="line">/******/</span><br><span class="line">cd external/doclava &amp;&amp; mm -B USE_NINJA=false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/usr/include/unistd.h:733:6: note: &apos;syscall&apos; has been explicitly marked deprecated here</span><br><span class="line">int      syscall(int, ...);</span><br><span class="line">         ^</span><br><span class="line">1 error generated.</span><br><span class="line">[  1% 408/31742] host C++: libc++abi &lt;...xternal/libcxxabi/src/cxa_demangle.cpp</span><br><span class="line">ninja: build stopped: subcommand failed.</span><br><span class="line">make: *** [ninja_wrapper] Error</span><br></pre></td></tr></table></figure><p>去到/Applications/XCode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs，发现MacOSX10.11.sdk已经被删除，只剩下MacOSX10.12.sdk，所以首先要去下载10.11的SDK。可以去MacOSX-SDKs下载MacOSX10.11.sdk，解压拷贝到/Applications/XCode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs。为了避免下次升级的时候再被删除，可以放到~/Document/MacOSX10.11.sdk，再给它创建一个软链接：</p><p>1<br>$ ln -s ~/Document/MacOSX10.11.sdk /Applications/XCode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk<br>然后确保AOSP源码下build/core/combo/mac_version.mk文件中<br>mac_sdk_versions_supported := 10.9 10.10 10.11<br>后面不要写10.12。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Unsupported curl, please use a curl not based on SecureTransport</span><br><span class="line">Jack server installation not found</span><br><span class="line">Unsupported curl, please use a curl not based on SecureTransport</span><br><span class="line">Unsupported curl, please use a curl not based on SecureTransport</span><br><span class="line">[  4% 842/20846] host C++: dexdump2 &lt;= art/dexdump/dexdump.cc</span><br><span class="line">ninja: build stopped: subcommand failed.</span><br><span class="line">make: *** [ninja_wrapper] Error 1</span><br><span class="line"></span><br><span class="line">#### make failed to build some targets (01:37 (mm:ss)) ####</span><br></pre></td></tr></table></figure><p>首先下载curl源码，然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/curl --with-ssl=/usr/local/Cellar/openssl/1.0.2d_1</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>jack-admin kill-server<br>jack-admin uninstall-server<br>cd prebuilts/sdk/tools<br>jack-admin install-server jack-launcher.jar  jack-server-4.7.ALPHA.jar</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;/&amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;:&amp;lt;行号&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;dd&lt;/code&gt;剪切&lt;br&gt;&lt;code&gt;yy&lt;/code&gt;复制&lt;br&gt;&lt;code&gt;p&lt;/code&gt;粘贴&lt;br&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="vim" scheme="http://seniorzhai.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="http://seniorzhai.github.io/2017/02/20/Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://seniorzhai.github.io/2017/02/20/Docker入门/</id>
    <published>2017-02-20T08:43:01.000Z</published>
    <updated>2018-06-29T04:42:18.709Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>#镜像</p><p>##查看镜像信息<br><code>docker images</code>命令可以列出本地主机上已有的镜像</p><ul><li>PEPOSITORY 仓库</li><li>TAG 标签信息</li><li>ID 唯一ID</li><li>CREATED 创建时间</li><li>VIRTUAL SIZE镜像大下<br><code>docker inspect</code>命令可以获取该奖项的详细信息<br>返回一个JSON格式的消息，如果只要其中一项内容时，可以使用<code>-f</code>指定参数。<br>例如镜像的<code>Architecture</code>信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#123;&#123;&quot;.Architecture&quot;&#125;&#125; ID</span><br></pre></td></tr></table></figure></li></ul><p>##搜寻镜像<br>使用<code>docker search</code>命令可以搜索远端仓库共享的镜像，默认搜索Docker Hub</p><p>##删除镜像<br>使用<code>docker rmi</code>命令可以删除镜像，命令后可以使标签或ID</p><p>##查看所有容器<br><code>docker ps -a</code>命令可以看到本机上存在的所有容器</p><p>##创建镜像</p><p>###基于已有的镜像的容器创建<br>docker commit 命令 主要选项包括</p><ul><li><code>-a</code> <code>--author=&quot;&quot;</code> 作者信息</li><li><code>-m</code> <code>--message=&quot;&quot;</code> 提交信息</li><li><code>-p</code> <code>--pause==true</code> 提交时暂停容器运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;message&quot; -a &quot;author&quot; id name</span><br></pre></td></tr></table></figure></li></ul><p>###基于本地模板导入<br>从一个操作西永模板文件导入一个镜像，推介使用<a href="https://openvz.org/Download/template/precreated" target="_blank" rel="noopener">OPENVZ</a>下载模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu-14.04-x86_64-minimal.tar.gz | docler import - ubuntu:14.04</span><br></pre></td></tr></table></figure></p><p>###存出和载入镜像</p><p>####存入镜像<br>使用<code>docker save</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o ubuntu_14.tar unbuntu:14.04</span><br></pre></td></tr></table></figure></p><p>###载入镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input unbuntu_14.tar</span><br></pre></td></tr></table></figure></p><p>###上传镜像<br>doker push命令可以上传镜像到仓库，默认上传到DockerHub上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag test:latest user/test:latest</span><br><span class="line">docker push user/test:latest</span><br></pre></td></tr></table></figure></p><p>#容器<br>容器是镜像的一个运行实例，带有额外可写的文件层</p><p>##创建容器<br><code>docker create</code>新建一个停止状态的容器，可以使用<code>docker start</code>命令启动它</p><p>##新建并启动容器<br><code>docker run</code></p><p>##使用特权<br>–privileged</p><p>##使用Dokerfile创建镜像<br>Docker可以使用文本文件Dockerfile来描述镜像从而创建镜像</p><p>###基本结构<br>Dockerfile由命令语句组成，支持<code>#</code>开头的注释<br>一般而言，Dockerfile分为四部分：基础信息、维护者信息、镜像操作指令和容器启动时执行指令<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行必须是指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="keyword">user</span> <span class="keyword">user</span>@email.com</span><br><span class="line"><span class="comment"># 镜像指令</span></span><br><span class="line"><span class="keyword">RUN</span> echo "test message" &gt;&gt; /etc/test.txt</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class="line"># 容器启动时执行指令</span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure></p><p>##指令</p><p>###1.FROM<br>FROM <image>:<tag><br>指定基础镜像</tag></image></p><p>###2.MAINTAINER<br>MAINTAINER <name> 指定维护者信息</name></p><p>###3.RUN<br>RUN <command></p><blockquote><p>RUN echo “root:Docker!” | chpasswd</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;#镜像&lt;/p&gt;
&lt;p&gt;##查看镜像信息&lt;br&gt;&lt;code&gt;docker images&lt;/code&gt;命令可以列出本地主机上已有的镜像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PEPOSITORY 仓库&lt;/li&gt;
&lt;li&gt;TAG 标签信息&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="Docker" scheme="http://seniorzhai.github.io/categories/Docker/"/>
    
    
      <category term="入门" scheme="http://seniorzhai.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>RN环境配置</title>
    <link href="http://seniorzhai.github.io/2016/12/22/RN%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://seniorzhai.github.io/2016/12/22/RN环境配置/</id>
    <published>2016-12-22T08:56:43.000Z</published>
    <updated>2018-07-30T05:19:41.766Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Mac系统的包管理器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure></p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="react-native-cli"><a href="#react-native-cli" class="headerlink" title="react-native-cli"></a>react-native-cli</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><h1 id="非必需软件"><a href="#非必需软件" class="headerlink" title="非必需软件"></a>非必需软件</h1><h2 id="Watchman"><a href="#Watchman" class="headerlink" title="Watchman"></a>Watchman</h2><p>监视文件系统变更的工具<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure></p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>静态的JS类型检查工具<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install flow</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native init FirstProject</span><br><span class="line">cd FirstProject</span><br><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h2&gt;&lt;p&gt;Mac系统的包管理器&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="ReactNative" scheme="http://seniorzhai.github.io/categories/ReactNative/"/>
    
    
      <category term="环境配置" scheme="http://seniorzhai.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android与so</title>
    <link href="http://seniorzhai.github.io/2016/12/07/Android%E4%B8%8Eso/"/>
    <id>http://seniorzhai.github.io/2016/12/07/Android与so/</id>
    <published>2016-12-07T09:25:41.000Z</published>
    <updated>2018-06-29T04:42:18.709Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>##ABI</p><p>ABI（Application Binary Interface）应用二进制借口，定义了CPU能够执行的二进制文件的格式规范。<br>Android支持的CPU架构众多，ABI包括<code>armeabi</code>、<code>armeabi-v7a</code>、<code>arm64-v8a</code>、<code>x86</code>、<code>x86_64</code>、<code>mips</code>、<code>mips64</code></p><blockquote><p><a href="https://developer.android.com/ndk/guides/abis.html#sa" target="_blank" rel="noopener">https://developer.android.com/ndk/guides/abis.html#sa</a></p></blockquote><p>so (shared object)是机器可以直接运行的二进制代码，买个App的so被打包在apk文件的<code>lib/</code>目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lib</span><br><span class="line">|</span><br><span class="line">├── armeabi</span><br><span class="line">│   └── libmath.so</span><br><span class="line">├── armeabi-v7a</span><br><span class="line">│   └── libmath.so</span><br><span class="line">├── mips</span><br><span class="line">│   └── libmath.so</span><br><span class="line">└── x86</span><br><span class="line">    └── libmath.so</span><br></pre></td></tr></table></figure></p><p>使用下面命令可以查看apk支持的abi<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appt dump bading app.apk | grep abi</span><br></pre></td></tr></table></figure></p><p>##制定ABI生产so</p><p>在<code>Application.mk</code>文件中指定<code>APP_ABI</code>参数</p><p>##Android系统的ABI支持</p><ul><li>primary ABI当前系统使用的ABI</li><li>secondary ABI 当前系统支持的其他ABI<br>一般情况手机不止支持一个ABI</li></ul><p>###查看ABI</p><ul><li><p><code>/system/build.prop</code>中制定了支持的ABI类型，可以在adb shell中查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getprop | grep abilist</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Build.BUPPORTED_ABIS</code>可以获取当前设备支持的ABI列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build.SUPPORTED_ABIS;</span><br></pre></td></tr></table></figure></li></ul><p>在apk安装过程时，Package Manager会扫描整个apk寻找符合下面文件路径格式动态链接库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib/&lt;primary-abi&gt;/lib&lt;name&gt;.so</span><br></pre></td></tr></table></figure></p><p><code>primary-abi</code>是上面表中的abi的值，<code>name</code>对应的是<code>Android.mk</code>中定义的<code>LOCAL_MODULE</code>的值<br>如果没有当前<code>primary-abi</code>的so，Package Manager会尝试寻找合适<code>secondary-abi</code>的so文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib/&lt;secondary-abi&gt;/lib&lt;name&gt;.so</span><br></pre></td></tr></table></figure></p><p>有合适的so文件后，包管理会在改ABI文件下的所有so库全部拷贝到应用的data目录下<code>data/data/&lt;package_name&gt;/lib/</code></p><p>在代码调用so时，如果ABI文件夹下没有提供so文件，运行时会遇到<code>java.lang.UnsatisfiedLinkError</code></p><p>##加载so<br><code>System.loadLibrary</code>之传入<code>Android.mk</code>中定义的<code>LOCAL_MODULE</code>的值<br><code>System.load</code>这个方法可以动态的加载非apk内置的so，甚至动态下载的so，但是不能加载SD卡中的so<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.load(&quot;/data/data/&lt;package-name/dir/libmath.so&quot;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##ABI&lt;/p&gt;
&lt;p&gt;ABI（Application Binary Interface）应用二进制借口，定义了CPU能够执行的二进制文件的格式规范。&lt;br&gt;Android支持的CPU架构众多，ABI包括&lt;code&gt;armeabi&lt;/c
      
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="ndk" scheme="http://seniorzhai.github.io/tags/ndk/"/>
    
      <category term="so" scheme="http://seniorzhai.github.io/tags/so/"/>
    
  </entry>
  
  <entry>
    <title>Android Build</title>
    <link href="http://seniorzhai.github.io/2016/10/13/Android-Build/"/>
    <id>http://seniorzhai.github.io/2016/10/13/Android-Build/</id>
    <published>2016-10-13T07:19:07.000Z</published>
    <updated>2018-06-29T04:41:00.186Z</updated>
    
    <content type="html"><![CDATA[<p>Android Build系统是Android源码的一部分，用来编译Android系统、Android SDK和相关文档。<br>主要有Make文件、Shell脚本以及Python脚本组成，其中最主要的是Make文件。<br><a id="more"></a><br>Android包含了大量的开源项目以及许多的模块，不同产商的不同设备对Android的定制也不一样，那么如何将这些项目和模块的编译同意管理起来？如何能够在不同的操作系统上进行编译？如何在编译时能够支持面向不同的硬件设备？不同的编译类型？同事还要提供面向各个产商定制扩展？</p><p>Build系统的主要逻辑都在Make文件上，其他脚本只是起到一些辅助作用<br>整个Build系统中的Make文件可以分为三类：</p><ol><li>Build系统核心文件，此类文件定义了整个Build系统的基础框架，这些文件位于<code>/build/core</code>目录下</li><li>针对某设备的Make文件，这些文件通常位于<code>device</code>目录下</li><li>针对某个模块的Make文件，这类文件的名称统一为<code>Android.mk</code></li></ol><p>##执行编译<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh # 引入build/envsetup.sh脚本，该脚本初始化编译环境</span><br><span class="line">lunch full-eng # lunch函数的参数用来制定此次编译的目标设备以及编译类型</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Build系统是Android源码的一部分，用来编译Android系统、Android SDK和相关文档。&lt;br&gt;主要有Make文件、Shell脚本以及Python脚本组成，其中最主要的是Make文件。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>API可用性检测</title>
    <link href="http://seniorzhai.github.io/2016/08/26/API%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    <id>http://seniorzhai.github.io/2016/08/26/API可用性检测/</id>
    <published>2016-08-26T05:37:00.000Z</published>
    <updated>2018-06-29T04:38:41.401Z</updated>
    
    <content type="html"><![CDATA[<p>Swift有检查API可用性的内置支持，确保我们在使用时不会不小心使用当前不可用的API<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> # available(platform name version, ..., *) &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可用性条件获取了一系列平台的名字和版本，平台名可以是<code>iOS</code>、<code>OSX</code>、<code>watchOS</code>，版本号可以是主版本号或者小版本，比如<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># available(iOS <span class="number">9</span>, <span class="type">OSX10</span>.<span class="number">10</span>, *)</span><br></pre></td></tr></table></figure></p><p>最后一个参数<code>*</code>是必须写的，用于处理未来潜在的平台</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift有检查API可用性的内置支持，确保我们在使用时不会不小心使用当前不可用的API&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://seniorzhai.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>guard和defer</title>
    <link href="http://seniorzhai.github.io/2016/08/25/guard%E5%92%8Cdefer/"/>
    <id>http://seniorzhai.github.io/2016/08/25/guard和defer/</id>
    <published>2016-08-25T11:01:12.000Z</published>
    <updated>2018-06-29T04:38:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>在看swift的代码的时候，遇见两个新的关键字，语法特性很特别<br><a id="more"></a></p><h1 id="guard"><a href="#guard" class="headerlink" title="guard"></a>guard</h1><p>guard有点像断言<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &lt; <span class="number">13</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与上面代码等价</span></span><br><span class="line"><span class="keyword">guard</span> age &gt;= <span class="number">13</span> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>guard起来保证的作用，age大于13否则return<br>在<code>if-let</code>解包的时候使用，会使得代码看清来更简洁<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> name = user.name <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 逻辑 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = user.name &#123;</span><br><span class="line">  <span class="comment">/* 处理逻辑 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>defer是使代码延后处理的新特性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">openDirectory()</span><br><span class="line"><span class="keyword">defer</span>&#123;</span><br><span class="line">  closeDirectory()</span><br><span class="line">&#125;</span><br><span class="line">opeFile()</span><br><span class="line"><span class="keyword">defer</span> &#123;</span><br><span class="line">  closeFile()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p><p>defer会在将代码块以入栈出栈的方式延后运行，比如上面的代码会先执行打开文件夹(openDirectory)后打开文件(openFile)，在所有处理完成后，执行关闭文件(closeFile)，再关闭文件夹(closeDirectory)的操作</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看swift的代码的时候，遇见两个新的关键字，语法特性很特别&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="swift" scheme="http://seniorzhai.github.io/tags/swift/"/>
    
      <category term="关键字" scheme="http://seniorzhai.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>摄影预处理</title>
    <link href="http://seniorzhai.github.io/2016/08/07/%E6%91%84%E5%BD%B1%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>http://seniorzhai.github.io/2016/08/07/摄影预处理/</id>
    <published>2016-08-07T08:47:42.000Z</published>
    <updated>2018-06-29T04:41:00.187Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Camera RAW</p><p>#预处理</p><ol><li>准确的色彩还原<br>用吸色找中性灰</li><li>正确的黑白场<br>按住option调整黑白，主体黑色不能纯黑，主体不能发白</li><li>足够的清晰度<br>加清晰度需要减曝光<br>option调整蒙版，之后锐化</li><li>适当的饱和度<br>自然饱和度 若隐若现的颜色<br>饱和度 已经出现的颜色</li><li>丰富合理的层次<br>讲直方图的信息展开</li></ol><p>#二次构图<br>先做相机、镜头矫正</p><blockquote><p>删除色差</p></blockquote><p>#输出</p><ul><li><p>TIFF印刷，色彩空间Adobe RGB，色彩深度16位</p><blockquote><p>相机用Adobe RGB</p></blockquote></li><li><p>网络输出<br>JPEG 删除信息 品质选双数<br>色彩空间sRGB 色彩深度8位 大小1500-2000<br>可以使用PS-脚本-图像处理器批量处理</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Camera RAW&lt;/p&gt;
&lt;p&gt;#预处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准确的色彩还原&lt;br&gt;用吸色找中性灰&lt;/li&gt;
&lt;li&gt;正确的黑白场&lt;br&gt;按住option调整黑白，主体黑色不能纯黑，主体不能发白&lt;/li&gt;
&lt;li&gt;足够的清晰度&lt;
      
    
    </summary>
    
      <category term="Camera" scheme="http://seniorzhai.github.io/categories/Camera/"/>
    
    
      <category term="预处理" scheme="http://seniorzhai.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>专用图层</title>
    <link href="http://seniorzhai.github.io/2016/08/03/%E4%B8%93%E7%94%A8%E5%9B%BE%E5%B1%82/"/>
    <id>http://seniorzhai.github.io/2016/08/03/专用图层/</id>
    <published>2016-08-03T06:05:38.000Z</published>
    <updated>2018-06-29T04:38:41.491Z</updated>
    
    <content type="html"><![CDATA[<p>iOS里有很多专用的Layer，用来处理各种不同绘制需求<br><a id="more"></a></p><h2 id="CATextLayer"><a href="#CATextLayer" class="headerlink" title="CATextLayer"></a>CATextLayer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textLayer = <span class="type">CATextLayer</span>()</span><br><span class="line">textLayer.frame = <span class="keyword">self</span>.view.bounds</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.view.layer.addSublayer(textLayer)</span><br><span class="line"></span><br><span class="line">textLayer.foregroundColor = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span></span><br><span class="line">textLayer.alignmentMode = kCAAlignmentJustified</span><br><span class="line">textLayer.wrapped = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">15</span>)</span><br><span class="line"><span class="keyword">let</span> fontRef = <span class="type">CGFontCreateWithFontName</span>(font.fontName)</span><br><span class="line">textLayer.font = fontRef</span><br><span class="line">textLayer.fontSize = font.pointSize</span><br><span class="line"><span class="type">CFRelease</span>(fontRef)</span><br><span class="line">textLayer.string = <span class="string">"示例文字\n示例文字"</span></span><br></pre></td></tr></table></figure><blockquote><p>注: 需要指定contentScale才能按设备放大系数准确渲染</p></blockquote><p><code>CATextLayer</code>的<code>font</code>属性不是一个<code>UIFont</code>类型，二是一个<code>CFTypeRef</code>类型，这样可以根据需要来使用CGFontRef还是CTFontRef</p><h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS里有很多专用的Layer，用来处理各种不同绘制需求&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图层几何学</title>
    <link href="http://seniorzhai.github.io/2016/06/26/%E5%9B%BE%E5%B1%82%E5%87%A0%E4%BD%95%E5%AD%A6/"/>
    <id>http://seniorzhai.github.io/2016/06/26/图层几何学/</id>
    <published>2016-06-26T13:10:50.000Z</published>
    <updated>2018-06-29T04:38:41.497Z</updated>
    
    <content type="html"><![CDATA[<p>UIView有三个比较重要的布局属性：<code>frame</code>，<code>bounds</code>，<code>center</code>，对应到CALayer叫做<code>frame</code>，<code>bounds</code>，<code>position</code><br><a id="more"></a></p><ul><li><code>frame</code>代表图层的外部坐标，也就是父图层上占据的空间</li><li><code>bounds</code>内部坐标，{0，0}是图层的左上角</li><li><code>center</code>、<code>position</code>都代表了相对父图层的<code>anchorPoint</code>所在的位置<br><img src="/img/16072501.jpeg" alt=""></li></ul><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>默认的anchorPoint位于图层的中点，所以图层将会以这个点为中心放置，anchorPoint属性并没有暴露个UIView接口暴露出来，这也就是视图position属性被叫做<code>center</code>，但是图层的<code>anchorPoint</code>可以被移动<br><img src="/img/16072601.jpeg" alt=""><br><code>anchorPoint</code>用单位坐标来描述，图层左上角是{0,0}，右下角是{1,1}，默认坐标是{0.5,0.5}，<code>anchorPoint</code>也可以通过指定x和y值小于或大于1，使它放置在图层范围之外。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIView有三个比较重要的布局属性：&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;center&lt;/code&gt;，对应到CALayer叫做&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;position&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>图层几何学</title>
    <link href="http://seniorzhai.github.io/2016/06/26/Hit-Testing/"/>
    <id>http://seniorzhai.github.io/2016/06/26/Hit-Testing/</id>
    <published>2016-06-26T13:10:50.000Z</published>
    <updated>2018-06-29T04:38:41.449Z</updated>
    
    <content type="html"><![CDATA[<p>UIView有三个比较重要的布局属性：<code>frame</code>，<code>bounds</code>，<code>center</code>，对应到CALayer叫做<code>frame</code>，<code>bounds</code>，<code>position</code><br><a id="more"></a></p><ul><li><code>frame</code>代表图层的外部坐标，也就是父图层上占据的空间</li><li><code>bounds</code>内部坐标，{0，0}是图层的左上角</li><li><code>center</code>、<code>position</code>都代表了相对父图层的<code>anchorPoint</code>所在的位置<br><img src="/img/16072501.jpeg" alt=""></li></ul><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>默认的anchorPoint位于图层的中点，所以图层将会以这个点为中心放置，anchorPoint属性并没有暴露个UIView接口暴露出来，这也就是视图position属性被叫做<code>center</code>，但是图层的<code>anchorPoint</code>可以被移动<br><img src="/img/16072601.jpeg" alt=""><br><code>anchorPoint</code>用单位坐标来描述，图层左上角是{0,0}，右下角是{1,1}，默认坐标是{0.5,0.5}，<code>anchorPoint</code>也可以通过指定x和y值小于或大于1，使它放置在图层范围之外。</p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>一个图层的<code>position</code>依赖于它父图层的<code>bounds</code>，如果父图层发生了移动，它的所有子图层也会跟着移动<br>定义一个图层坐标系下的点或者矩形转换成另一个图层坐标系下的点或者矩形</p><ul><li><code>convertPoint(p: CGPoint, toLayer:CALayer)</code></li><li><code>convertPoint(p: CGPoint,toLayer:CALayer)</code></li><li><code>convertRect(rect: CGRect,fromLayer: CALayer)</code></li><li><code>convertRect(rect: CGRect,toLayer: CALayer)</code></li></ul><h3 id="翻转几何结构"><a href="#翻转几何结构" class="headerlink" title="翻转几何结构"></a>翻转几何结构</h3><p>通常iOS一个图层的position位于父图层的左上角，Mac OS则位于左下角，Core Animation可以通过<code>geometryFlipped</code>属性来适配这两种情况，它决定了一个图层的坐标系是否相对父图层垂直翻转。</p><h3 id="Z坐标轴"><a href="#Z坐标轴" class="headerlink" title="Z坐标轴"></a>Z坐标轴</h3><p>CALayer存在一个三维空间，除了<code>posistion</code>和<code>anchorPoint</code>属性外，CALayer还有另外两个属性，<code>zPosition</code>和<code>anchorPointZ</code>两者都是在Z轴上描述图层位置的浮点类型。<br><code>zPosition</code>决定图层显示顺序，图层根据子图层的<code>sublayers</code>出现的顺序来类绘制。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.greenView.layer.zPosition = <span class="number">1</span>.0f</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIView有三个比较重要的布局属性：&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;center&lt;/code&gt;，对应到CALayer叫做&lt;code&gt;frame&lt;/code&gt;，&lt;code&gt;bounds&lt;/code&gt;，&lt;code&gt;position&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>CALayer</title>
    <link href="http://seniorzhai.github.io/2016/06/25/CALayer/"/>
    <id>http://seniorzhai.github.io/2016/06/25/CALayer/</id>
    <published>2016-06-25T12:29:25.000Z</published>
    <updated>2018-06-29T04:38:41.434Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS当中，所有的视图都从<code>UIView</code>的基类派生二来，UIView  可以处理触摸时间，可以支持基于<code>Core Graphics绘图</code>，可以做旋转或者缩放。<br><a id="more"></a></p><h2 id="CALayer"><a href="#CALayer" class="headerlink" title="CALayer"></a>CALayer</h2><p><code>CALayer</code>类在概念上和<code>UIView</code>类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容，管理子图层的位置。和<code>UIView</code>不同的是<code>CALayer</code>不处理用户交互。<br>每一个<code>UIView</code>都有一个<code>CALayer</code>实例的图层属性，也就是所谓的<code>backing layer</code>，视图的职责就是创建并管理这个图层。<br>UIView没有暴露出一些CALayer的功能：</p><ul><li>阴影、圆角、带颜色的边框</li><li>3D变换</li><li>非矩形范围</li><li>透明遮罩</li><li>多级非线性动画</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  contentView.backgroundColor = <span class="type">UIColor</span>.grayColor()</span><br><span class="line">  <span class="keyword">let</span> layer = <span class="type">CALayer</span>()</span><br><span class="line">  layer.frame = <span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">  layer.backgroundColor = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span></span><br><span class="line">  contentView.layer.addSublayer(layer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个视图只有一个相关联的图层(自动创建)，同时也可以支持添加无数个子图层，并且把它直接添加视图关联图层的子图层</p><p>使用图层关联的视图而不是CALayer的好处在于，能在使用所有CALayer底层特性的同时，也可以使用UIView的高级API<br>当满足以下条件的时候，使用CALayer更为合适</p><ul><li>开发同时在Mac OS上运行的跨平台应用</li><li>使用多种CALayer的子类，并且不想创建额外的UIView去包装它们所有</li><li>做一些对性能特别挑剔的工作，比如对UIView一些可忽略不计的操作都会引起显著的不同</li></ul><h2 id="contents属性"><a href="#contents属性" class="headerlink" title="contents属性"></a>contents属性</h2><p>CALayer有一个属性<code>contents</code>，这个属性的类型是id，意味着它可以是任何类的对象，给contents赋任何值，都可以编译通过，但是contents不是CGImage，那么得到的图层将是空白。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">     contentView.backgroundColor = <span class="type">UIColor</span>.grayColor()</span><br><span class="line">     <span class="keyword">let</span> layer = <span class="type">CALayer</span>()</span><br><span class="line">     layer.frame = <span class="type">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">     layer.contents = <span class="type">UIImage</span>(named: <span class="string">"icon"</span>)?.<span class="type">CGImage</span></span><br><span class="line"></span><br><span class="line">     contentView.layer.addSublayer(layer)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>简单的添加就可以显示在UIView中显示图片</p><h3 id="contentGravity"><a href="#contentGravity" class="headerlink" title="contentGravity"></a>contentGravity</h3><p>和UIView的contentMode一样，contentGravity可以指定内容在同层边界中对齐方式</p><ul><li>kCAGravityCenter</li><li>kCAGravityTop</li><li>kCAGravityBottom</li><li>kCAGravityLeft</li><li>kCAGravityRight</li><li>kCAGravityTopLeft</li><li>kCAGravityTopRight</li><li>kCAGravityBottomLeft</li><li>kCAGravityBottomRight</li><li>kCAGravityResize</li><li>kCAGravityResizeAspect</li><li>kCAGravityResizeAspectFill<h3 id="contentsScale"><a href="#contentsScale" class="headerlink" title="contentsScale"></a>contentsScale</h3><code>contentsScale</code>属性定义了寄宿图的像素尺寸和视图大小的比例，默认情况下它是一个值为1.0的浮点数<br>如果<code>contentsScale</code>设置为1.0，将会每个点1一个像素绘制1个像素绘制图片，如果设置为2.0，则会每两个点像素绘制图片<h3 id="maskToBounds"><a href="#maskToBounds" class="headerlink" title="maskToBounds"></a>maskToBounds</h3>UIView有一个<code>clipsToBounds</code>的属性用来指定是否显示超出边界的内容，CALayer对应的属性叫做<code>maskToBounds</code><h3 id="contentsCenter"><a href="#contentsCenter" class="headerlink" title="contentsCenter"></a>contentsCenter</h3>contentsCenter定义了一个固定的边框和一个图层上可拉伸的区域。改变contentsCenter的值并不会影响到寄宿图的显示。<br>默认情况下，contentsCenter是{0,0,1,1}，这意味着如果大小改变了，那么寄宿图将会均匀地拉伸开。</li></ul><h2 id="自定义绘制"><a href="#自定义绘制" class="headerlink" title="自定义绘制"></a>自定义绘制</h2><p>给<code>contents</code>赋CGImage并不是唯一设置寄宿图的方法，也可以直接用<code>Core Graphics</code>直接绘制寄宿图，也能够继承UIView并实现<code>drawRect</code>方法来绘制<br>当视图在屏幕上显示的时候，drawRect方法会被调用，在方法里可以使用Graphics去绘制一个寄宿图。然后内容就会被缓存起来直到它需要更新（通常因为开发者调用了setNeedsDisplay方法）<br>CALayer有一个可选的delegate属性，实现了CALayerDelegate协议，当CALayer需要一个内容 特定的信息时，就会从协议中请求<code>drawLayer</code>方法，CALayerDelegate是非正式协议<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    contentView.layer.delegate = <span class="keyword">self</span></span><br><span class="line">    contentView.layer.display()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawLayer</span><span class="params">(layer: CALayer, inContext ctx: CGContext)</span></span> &#123;</span><br><span class="line">    <span class="type">CGContextSetLineWidth</span>(ctx, <span class="number">10</span>)</span><br><span class="line">    <span class="type">CGContextSetStrokeColorWithColor</span>(ctx, <span class="type">UIColor</span>.redColor().<span class="type">CGColor</span>)</span><br><span class="line">    <span class="type">CGContextStrokeEllipseInRect</span>(ctx, layer.bounds)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS当中，所有的视图都从&lt;code&gt;UIView&lt;/code&gt;的基类派生二来，UIView  可以处理触摸时间，可以支持基于&lt;code&gt;Core Graphics绘图&lt;/code&gt;，可以做旋转或者缩放。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://seniorzhai.github.io/categories/iOS/"/>
    
    
      <category term="view" scheme="http://seniorzhai.github.io/tags/view/"/>
    
      <category term="动画" scheme="http://seniorzhai.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>GoogleIO第一份惊喜-ConstraintLayout</title>
    <link href="http://seniorzhai.github.io/2016/05/19/GoogleIO%E7%AC%AC%E4%B8%80%E4%BB%BD%E6%83%8A%E5%96%9C-ConstraintLayout/"/>
    <id>http://seniorzhai.github.io/2016/05/19/GoogleIO第一份惊喜-ConstraintLayout/</id>
    <published>2016-05-19T06:03:07.000Z</published>
    <updated>2018-06-29T04:38:41.447Z</updated>
    
    <content type="html"><![CDATA[<p>了解iOS开发的童鞋应该知道，自iPhone6推出后，iOS也进入多屏适配时代，AutoLayout成为了适配的首选，Storyboard+AutoLayout成为了iOS布局的主要流派之一（代码适配也是不错的选择）。<br><a id="more"></a><br>拖拽组件，设定约束，一个界面就基本完成了（当然，还有一堆高级的用法）。而Android开发工程师还在苦逼地将设计稿分割，这部分用一个RelativeLayout，这部分用LinearLayout……然后嵌套一下，或者再套一层。对于很多对几大布局不是很了解的同学，往往几个界面的组成就够头痛一阵了。<br>拯救你们的救星来了，ConstraintLayout将解决你的难言之隐，还在等待什么，赶快拿起电话*&amp;……%￥(不好意思出戏了)</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先确保你的Android Studio是<a href="http://tools.android.com/download/studio/canary" target="_blank" rel="noopener">2.2 preview</a>或者更高版本，预览拖拽设定约束需要新的布局编辑窗口，低版本AS应该可以用ConstraintLayout，但没用设置约束功能（光手写XML，为什么还用ConstraintLayout）</p><p>ConstraintLayout是一个单独的支持包，所以需要在gradle中添加引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  compile &apos;com.android.support.constraint:constraint-layout:1.0.0-alpha&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Layout文件中引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="/img/16051900.jpeg" alt=""><br>在布局编辑窗口中选择<code>Design</code>(我几乎是第一次选择他，而不是直接去使用TextV去写XML)<br><img src="/img/16051901.png" alt=""></p><h3 id="约束Constraints"><a href="#约束Constraints" class="headerlink" title="约束Constraints"></a>约束Constraints</h3><p>约束可以帮助你设定不同组件之间的位置关系，比如，这个A组件在B组件右边25dp且位于C组件下方8dp的位置。</p><p>在布局编辑窗口中，当你选中一个组件可以看到以下情况<br><img src="/img/16051902.png" alt=""><br>拖拽边角的方形，可以控制组件的大小<br><img src="/img/16051903.png" alt=""><br>拖拽四边的圆形，可以设置组件相对四个方向上的距离约束<br><img src="/img/16051904.png" alt=""><br>拖拽下方圆角矩形，可以设置组件间的基线对齐</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>当拖动大小约束时，大小会被改变<br><img src="/img/16051905.gif" alt=""><br>当拖动位置约束时，锚点变绿即建立约束成功<br><img src="/img/16051906.gif" alt=""><br>当约束建立成功后，再次点击锚点即可删除约束<br><img src="/img/16051907.gif" alt=""><br>设置基线约束，可以对齐文本<br><img src="/img/16052001.gif" alt=""></p><p>当然拖动并不能准确的设置约束，这个时候我们看看到右边的属性窗口<br><img src="/img/16051908.jpeg" alt=""><br>在这里你可以设置组件的相关约束和组件的相关属性<br>在属性窗口中，你可以看到约束的UI界面是这样的<br><img src="/img/16051909.png" alt=""><br>每个约束是一个<code>I</code>型的图标，点击可以切换如下三个状态<br><img src="/img/16051910.png" alt=""><br>Fixed：固定尺寸约束，指定组件大小<br><img src="/img/16051911.png" alt=""><br>AnySize：占用可用空间<br><img src="/img/16051912.png" alt=""><br>Wrap Content：包含组件内容大小</p><p>以上可以在<a href="https://github.com/googlecodelabs/constraint-layout" target="_blank" rel="noopener">官方示例</a>中查看</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>UI操作并不顺畅，控件经常点击不到</li><li>缺少等宽等约束，复杂的需求不一定能实现</li><li>当ConstraintLayout不是根布局时， UI操作基本不可用<blockquote><p>注：以上可能是本人并不熟练或不够了解导致的</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解iOS开发的童鞋应该知道，自iPhone6推出后，iOS也进入多屏适配时代，AutoLayout成为了适配的首选，Storyboard+AutoLayout成为了iOS布局的主要流派之一（代码适配也是不错的选择）。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="AutoLayout" scheme="http://seniorzhai.github.io/tags/AutoLayout/"/>
    
      <category term="约束" scheme="http://seniorzhai.github.io/tags/%E7%BA%A6%E6%9D%9F/"/>
    
      <category term="布局" scheme="http://seniorzhai.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="Layout" scheme="http://seniorzhai.github.io/tags/Layout/"/>
    
  </entry>
  
  <entry>
    <title>Weex初探</title>
    <link href="http://seniorzhai.github.io/2016/05/10/Weex%E5%88%9D%E6%8E%A2/"/>
    <id>http://seniorzhai.github.io/2016/05/10/Weex初探/</id>
    <published>2016-05-10T09:53:42.000Z</published>
    <updated>2018-06-29T04:38:41.481Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>目前weex还在内测阶段，还是一个github的私有项目</p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>Node.js 4.0+</li><li>Android SDK</li><li>Android Studio<h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2>clone项目，在项目目录下执行<code>npm install</code>,<code>./start</code><br>将<code>android/playground/app/java/com/alibaba/weex/WXMainActivity</code>修改<code>CURRENT_IP</code>将本地IP<br>之后运行项目<h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2>可以看到weex的写法和原生的html很像，简单的hello weex如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">"style-size:100px;"</span>&gt;</span>Hello weex!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;目前weex还在内测阶段，还是一个github的私有项目&lt;/p&gt;
&lt;h2 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;No
      
    
    </summary>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
    
      <category term="Android" scheme="http://seniorzhai.github.io/tags/Android/"/>
    
      <category term="weex" scheme="http://seniorzhai.github.io/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView的使用</title>
    <link href="http://seniorzhai.github.io/2016/04/25/UIStackView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://seniorzhai.github.io/2016/04/25/UIStackView的使用/</id>
    <published>2016-04-25T06:28:56.000Z</published>
    <updated>2018-06-29T04:38:41.478Z</updated>
    
    <content type="html"><![CDATA[<p>Stack View是一个方便垂直或水平排布subView，与Android中的LinearLayout非常相似。<br><a id="more"></a></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>使用Stack View在Attributes Inspector中，Axis表示Stack View的SubView是水平排布还是垂直布局。Alignment控制SubView的对齐方式。Distribution定义SubView的分布方式。Spacing为SubView间的最小间距。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stack View是一个方便垂直或水平排布subView，与Android中的LinearLayout非常相似。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ProGuard详解</title>
    <link href="http://seniorzhai.github.io/2016/04/11/ProGuard%E8%AF%A6%E8%A7%A3/"/>
    <id>http://seniorzhai.github.io/2016/04/11/ProGuard详解/</id>
    <published>2016-04-11T06:16:42.000Z</published>
    <updated>2018-06-29T04:38:41.459Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>ProGuard包括4各功能：</p><ul><li>压缩(Shrink) 移除代码中无用的类、字段、方法、和特性</li><li>优化(Optimize) 对字节码进行优化，移除无用的指令</li><li>混淆(Obfuscate) 使用剪短无意义的名称对类、字段、方法重命名</li><li>预检(Preveirfy) 在Java平台上对处理后的代码进行预检</li></ul><h2 id="ProGuard的工作原理"><a href="#ProGuard的工作原理" class="headerlink" title="ProGuard的工作原理"></a>ProGuard的工作原理</h2><p>ProGuard由<code>Shrink</code>,<code>Optimize</code>,<code>Obfuscate</code>,<code>Preveirfy</code>四个步骤组成，其中每个步骤都是可选的</p><h2 id="编写ProGuard文件"><a href="#编写ProGuard文件" class="headerlink" title="编写ProGuard文件"></a>编写ProGuard文件</h2><ol><li>基本指令</li></ol><ul><li>代码混淆压缩比，在0~7之间，默认为5，<code>-optimizationpasses 5</code></li><li>混淆时不使用大小写混合，混淆的类名为小写 <code>-dontusemixedcaseclassnames</code></li><li>指定不去忽略废公共的库的类 <code>-dontskipnonpubliclibaryclasses</code></li><li>指定不去忽略废公共的库的类的成员 <code>-dontskipnonpubliclibaryclassesmembers</code></li><li>不做预校验 <code>-dontpreverify</code></li><li>生成映射文件 <code>-verbose</code></li><li>使用printmapping指定映射文件的名称 <code>-printmapping proguardMapping.txt</code></li><li>指定混淆时采用的算法 <code>-optimizations ! code/ simplification/ arithmetic,!fiedld/*,class/merging/*</code></li><li>保护代码中的Annotation不被混淆 <code>-keepattributes *Annotation*</code></li><li>避免混淆泛型 <code>-keepattributes Signature</code></li><li>抛出异常时保留代码行数 <code>-keepattributes SourceFile,LineNumberTable</code></li></ul><ol start="2"><li>需要保留的</li></ol><ul><li><p>保留本地native方法不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- keepclasseswithmembernames class * &#123;</span><br><span class="line">  native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留某些子类不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- keep public class * extends android.app.Activity</span><br></pre></td></tr></table></figure></li><li><p>保护在XML中设置onClick不被影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">  public void *(android.view.View);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保护Fragment <code>- keep public class android.support.v4.app.Fragment.** {*;}</code></p></li><li><p>保留枚举不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- keepclassmembers enum * &#123;</span><br><span class="line">  public static **&#123;&#125; values();</span><br><span class="line">  public static ** valueOf(Java.lang.String);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留自定义控件不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- keep public class * extends android.view.View &#123;</span><br><span class="line">  *** get*();</span><br><span class="line">  void set*(***);</span><br><span class="line">  public &lt;init&gt;(android.content.Context);</span><br><span class="line">  public &lt;init&gt;(android.content.Context,android.util.ArrtibuteSet);</span><br><span class="line">  public &lt;init&gt;(android.content.Context,android.util.ArrtibuteSet,int);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留Parcelable序列化不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- keep class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留Serializable序列化类不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- keepclassemembers class * implements java.io.Serializable &#123;</span><br><span class="line">  static final long serialVersionID;</span><br><span class="line">  private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">  private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">  private void readObject(java.io.ObjectInputStream);</span><br><span class="line">  java.lang.Object writeReplace();</span><br><span class="line">  java.lang.Object readResolve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留R文件下的资源不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- keep class **.R$&#123;*;&#125;</span><br></pre></td></tr></table></figure></li><li><p>保留内部类不被混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- keep class com.example.app.ui.MainActivity$*&#123;*;&#125;</span><br></pre></td></tr></table></figure></li><li><p>对WebView的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">  public void *(android.webkit.WebView,java.lang.String,android.graphics.Bitmap);</span><br><span class="line">  public boolean *(android.webkit.WebView,java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">- keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">  public void *(android.webkit.webView,java.lang.String);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对JavaScript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- keepclassemembers class com.example.app.MainActivity$JSInterface &#123;</span><br><span class="line">  &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>针对第三方库的混淆保护<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- libraryjas libs/android-support-v4.jar</span><br><span class="line">- dontwarn android.support.v4.**</span><br><span class="line">- keep class android.support.v4.**&#123;*;&#125;</span><br><span class="line">- kepp interface android.support.v4.app.**&#123;*;&#125;</span><br><span class="line">- kepp public class * extends android.support.v4.**</span><br><span class="line">- keep public class * extends android.app.Fragment</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ProGuard包括4各功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩(Shrink) 移除代码中无用的类、字段、方法、和特性&lt;/li&gt;
&lt;li&gt;优化(Optimize) 对字节码进行优化，移除无用的指令&lt;/li&gt;
&lt;li&gt;混淆(Obfuscat
      
    
    </summary>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
    
      <category term="ProGuard" scheme="http://seniorzhai.github.io/tags/ProGuard/"/>
    
      <category term="混淆" scheme="http://seniorzhai.github.io/tags/%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
</feed>
